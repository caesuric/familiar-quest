// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: character_sync.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class CharacterSync
{
  static readonly string __ServiceName = "CharacterSync";

  static readonly grpc::Marshaller<global::CharacterWorldStates> __Marshaller_CharacterWorldStates = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CharacterWorldStates.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::UpdateCharacterWorldStateResult> __Marshaller_UpdateCharacterWorldStateResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UpdateCharacterWorldStateResult.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::CharacterWorldStateRequest> __Marshaller_CharacterWorldStateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CharacterWorldStateRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::CharacterWorldStateUpdate> __Marshaller_CharacterWorldStateUpdate = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CharacterWorldStateUpdate.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::UpdatePersonalWorldStateResult> __Marshaller_UpdatePersonalWorldStateResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UpdatePersonalWorldStateResult.Parser.ParseFrom);

  static readonly grpc::Method<global::CharacterWorldStates, global::UpdateCharacterWorldStateResult> __Method_UpdateCharacterWorldStates = new grpc::Method<global::CharacterWorldStates, global::UpdateCharacterWorldStateResult>(
      grpc::MethodType.Unary,
      __ServiceName,
      "UpdateCharacterWorldStates",
      __Marshaller_CharacterWorldStates,
      __Marshaller_UpdateCharacterWorldStateResult);

  static readonly grpc::Method<global::CharacterWorldStateRequest, global::CharacterWorldStates> __Method_GetCharacterWorldStates = new grpc::Method<global::CharacterWorldStateRequest, global::CharacterWorldStates>(
      grpc::MethodType.Unary,
      __ServiceName,
      "GetCharacterWorldStates",
      __Marshaller_CharacterWorldStateRequest,
      __Marshaller_CharacterWorldStates);

  static readonly grpc::Method<global::CharacterWorldStateUpdate, global::UpdatePersonalWorldStateResult> __Method_UpdatePersonalWorldState = new grpc::Method<global::CharacterWorldStateUpdate, global::UpdatePersonalWorldStateResult>(
      grpc::MethodType.Unary,
      __ServiceName,
      "UpdatePersonalWorldState",
      __Marshaller_CharacterWorldStateUpdate,
      __Marshaller_UpdatePersonalWorldStateResult);

  static readonly grpc::Method<global::CharacterWorldStateRequest, global::CharacterWorldStates> __Method_GetPlayerWorldStates = new grpc::Method<global::CharacterWorldStateRequest, global::CharacterWorldStates>(
      grpc::MethodType.Unary,
      __ServiceName,
      "GetPlayerWorldStates",
      __Marshaller_CharacterWorldStateRequest,
      __Marshaller_CharacterWorldStates);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::CharacterSyncReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of CharacterSync</summary>
  public abstract partial class CharacterSyncBase
  {
    public virtual global::System.Threading.Tasks.Task<global::UpdateCharacterWorldStateResult> UpdateCharacterWorldStates(global::CharacterWorldStates request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::CharacterWorldStates> GetCharacterWorldStates(global::CharacterWorldStateRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::UpdatePersonalWorldStateResult> UpdatePersonalWorldState(global::CharacterWorldStateUpdate request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::CharacterWorldStates> GetPlayerWorldStates(global::CharacterWorldStateRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for CharacterSync</summary>
  public partial class CharacterSyncClient : grpc::ClientBase<CharacterSyncClient>
  {
    /// <summary>Creates a new client for CharacterSync</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public CharacterSyncClient(grpc::Channel channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for CharacterSync that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public CharacterSyncClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected CharacterSyncClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected CharacterSyncClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    public virtual global::UpdateCharacterWorldStateResult UpdateCharacterWorldStates(global::CharacterWorldStates request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return UpdateCharacterWorldStates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::UpdateCharacterWorldStateResult UpdateCharacterWorldStates(global::CharacterWorldStates request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_UpdateCharacterWorldStates, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::UpdateCharacterWorldStateResult> UpdateCharacterWorldStatesAsync(global::CharacterWorldStates request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return UpdateCharacterWorldStatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::UpdateCharacterWorldStateResult> UpdateCharacterWorldStatesAsync(global::CharacterWorldStates request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_UpdateCharacterWorldStates, null, options, request);
    }
    public virtual global::CharacterWorldStates GetCharacterWorldStates(global::CharacterWorldStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetCharacterWorldStates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::CharacterWorldStates GetCharacterWorldStates(global::CharacterWorldStateRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_GetCharacterWorldStates, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::CharacterWorldStates> GetCharacterWorldStatesAsync(global::CharacterWorldStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetCharacterWorldStatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::CharacterWorldStates> GetCharacterWorldStatesAsync(global::CharacterWorldStateRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_GetCharacterWorldStates, null, options, request);
    }
    public virtual global::UpdatePersonalWorldStateResult UpdatePersonalWorldState(global::CharacterWorldStateUpdate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return UpdatePersonalWorldState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::UpdatePersonalWorldStateResult UpdatePersonalWorldState(global::CharacterWorldStateUpdate request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_UpdatePersonalWorldState, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::UpdatePersonalWorldStateResult> UpdatePersonalWorldStateAsync(global::CharacterWorldStateUpdate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return UpdatePersonalWorldStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::UpdatePersonalWorldStateResult> UpdatePersonalWorldStateAsync(global::CharacterWorldStateUpdate request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_UpdatePersonalWorldState, null, options, request);
    }
    public virtual global::CharacterWorldStates GetPlayerWorldStates(global::CharacterWorldStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetPlayerWorldStates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::CharacterWorldStates GetPlayerWorldStates(global::CharacterWorldStateRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_GetPlayerWorldStates, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::CharacterWorldStates> GetPlayerWorldStatesAsync(global::CharacterWorldStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetPlayerWorldStatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::CharacterWorldStates> GetPlayerWorldStatesAsync(global::CharacterWorldStateRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_GetPlayerWorldStates, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override CharacterSyncClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new CharacterSyncClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(CharacterSyncBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_UpdateCharacterWorldStates, serviceImpl.UpdateCharacterWorldStates)
        .AddMethod(__Method_GetCharacterWorldStates, serviceImpl.GetCharacterWorldStates)
        .AddMethod(__Method_UpdatePersonalWorldState, serviceImpl.UpdatePersonalWorldState)
        .AddMethod(__Method_GetPlayerWorldStates, serviceImpl.GetPlayerWorldStates).Build();
  }

  /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static void BindService(grpc::ServiceBinderBase serviceBinder, CharacterSyncBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_UpdateCharacterWorldStates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CharacterWorldStates, global::UpdateCharacterWorldStateResult>(serviceImpl.UpdateCharacterWorldStates));
    serviceBinder.AddMethod(__Method_GetCharacterWorldStates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CharacterWorldStateRequest, global::CharacterWorldStates>(serviceImpl.GetCharacterWorldStates));
    serviceBinder.AddMethod(__Method_UpdatePersonalWorldState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CharacterWorldStateUpdate, global::UpdatePersonalWorldStateResult>(serviceImpl.UpdatePersonalWorldState));
    serviceBinder.AddMethod(__Method_GetPlayerWorldStates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CharacterWorldStateRequest, global::CharacterWorldStates>(serviceImpl.GetPlayerWorldStates));
  }

}
#endregion
