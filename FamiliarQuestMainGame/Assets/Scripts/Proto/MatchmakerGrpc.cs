// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: matchmaker.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class MatchMaker
{
  static readonly string __ServiceName = "MatchMaker";

  static readonly grpc::Marshaller<global::GameCreationRequest> __Marshaller_GameCreationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GameCreationRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::GameCreationResult> __Marshaller_GameCreationResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GameCreationResult.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::GetActiveGamesRequest> __Marshaller_GetActiveGamesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GetActiveGamesRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::GameList> __Marshaller_GameList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GameList.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::GameConnectionRequest> __Marshaller_GameConnectionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GameConnectionRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::GameConnectionResult> __Marshaller_GameConnectionResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GameConnectionResult.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::GameDisconnectionRequest> __Marshaller_GameDisconnectionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GameDisconnectionRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::GameDisconnectionResult> __Marshaller_GameDisconnectionResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GameDisconnectionResult.Parser.ParseFrom);

  static readonly grpc::Method<global::GameCreationRequest, global::GameCreationResult> __Method_CreateGame = new grpc::Method<global::GameCreationRequest, global::GameCreationResult>(
      grpc::MethodType.Unary,
      __ServiceName,
      "CreateGame",
      __Marshaller_GameCreationRequest,
      __Marshaller_GameCreationResult);

  static readonly grpc::Method<global::GetActiveGamesRequest, global::GameList> __Method_GetActiveGames = new grpc::Method<global::GetActiveGamesRequest, global::GameList>(
      grpc::MethodType.Unary,
      __ServiceName,
      "GetActiveGames",
      __Marshaller_GetActiveGamesRequest,
      __Marshaller_GameList);

  static readonly grpc::Method<global::GameConnectionRequest, global::GameConnectionResult> __Method_ConnectToGame = new grpc::Method<global::GameConnectionRequest, global::GameConnectionResult>(
      grpc::MethodType.Unary,
      __ServiceName,
      "ConnectToGame",
      __Marshaller_GameConnectionRequest,
      __Marshaller_GameConnectionResult);

  static readonly grpc::Method<global::GameDisconnectionRequest, global::GameDisconnectionResult> __Method_DisconnectFromGame = new grpc::Method<global::GameDisconnectionRequest, global::GameDisconnectionResult>(
      grpc::MethodType.Unary,
      __ServiceName,
      "DisconnectFromGame",
      __Marshaller_GameDisconnectionRequest,
      __Marshaller_GameDisconnectionResult);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::MatchmakerReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of MatchMaker</summary>
  public abstract partial class MatchMakerBase
  {
    public virtual global::System.Threading.Tasks.Task<global::GameCreationResult> CreateGame(global::GameCreationRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::GameList> GetActiveGames(global::GetActiveGamesRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::GameConnectionResult> ConnectToGame(global::GameConnectionRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::GameDisconnectionResult> DisconnectFromGame(global::GameDisconnectionRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for MatchMaker</summary>
  public partial class MatchMakerClient : grpc::ClientBase<MatchMakerClient>
  {
    /// <summary>Creates a new client for MatchMaker</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public MatchMakerClient(grpc::Channel channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for MatchMaker that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public MatchMakerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected MatchMakerClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected MatchMakerClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    public virtual global::GameCreationResult CreateGame(global::GameCreationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return CreateGame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::GameCreationResult CreateGame(global::GameCreationRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_CreateGame, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::GameCreationResult> CreateGameAsync(global::GameCreationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return CreateGameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::GameCreationResult> CreateGameAsync(global::GameCreationRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_CreateGame, null, options, request);
    }
    public virtual global::GameList GetActiveGames(global::GetActiveGamesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetActiveGames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::GameList GetActiveGames(global::GetActiveGamesRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_GetActiveGames, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::GameList> GetActiveGamesAsync(global::GetActiveGamesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetActiveGamesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::GameList> GetActiveGamesAsync(global::GetActiveGamesRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_GetActiveGames, null, options, request);
    }
    public virtual global::GameConnectionResult ConnectToGame(global::GameConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ConnectToGame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::GameConnectionResult ConnectToGame(global::GameConnectionRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_ConnectToGame, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::GameConnectionResult> ConnectToGameAsync(global::GameConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ConnectToGameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::GameConnectionResult> ConnectToGameAsync(global::GameConnectionRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_ConnectToGame, null, options, request);
    }
    public virtual global::GameDisconnectionResult DisconnectFromGame(global::GameDisconnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return DisconnectFromGame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::GameDisconnectionResult DisconnectFromGame(global::GameDisconnectionRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_DisconnectFromGame, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::GameDisconnectionResult> DisconnectFromGameAsync(global::GameDisconnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return DisconnectFromGameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::GameDisconnectionResult> DisconnectFromGameAsync(global::GameDisconnectionRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_DisconnectFromGame, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override MatchMakerClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new MatchMakerClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(MatchMakerBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_CreateGame, serviceImpl.CreateGame)
        .AddMethod(__Method_GetActiveGames, serviceImpl.GetActiveGames)
        .AddMethod(__Method_ConnectToGame, serviceImpl.ConnectToGame)
        .AddMethod(__Method_DisconnectFromGame, serviceImpl.DisconnectFromGame).Build();
  }

  /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static void BindService(grpc::ServiceBinderBase serviceBinder, MatchMakerBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_CreateGame, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GameCreationRequest, global::GameCreationResult>(serviceImpl.CreateGame));
    serviceBinder.AddMethod(__Method_GetActiveGames, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GetActiveGamesRequest, global::GameList>(serviceImpl.GetActiveGames));
    serviceBinder.AddMethod(__Method_ConnectToGame, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GameConnectionRequest, global::GameConnectionResult>(serviceImpl.ConnectToGame));
    serviceBinder.AddMethod(__Method_DisconnectFromGame, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GameDisconnectionRequest, global::GameDisconnectionResult>(serviceImpl.DisconnectFromGame));
  }

}
#endregion
