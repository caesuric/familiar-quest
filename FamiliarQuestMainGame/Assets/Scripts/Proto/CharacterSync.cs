// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: character_sync.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from character_sync.proto</summary>
public static partial class CharacterSyncReflection {

  #region Descriptor
  /// <summary>File descriptor for character_sync.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CharacterSyncReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChRjaGFyYWN0ZXJfc3luYy5wcm90byJqChRDaGFyYWN0ZXJXb3JsZFN0YXRl",
          "cxIPCgdnYW1lX2lkGAEgASgJEiwKDmNoYXJhY3Rlcl9kYXRhGAIgAygLMhQu",
          "Q2hhcmFjdGVyV29ybGRTdGF0ZRITCgt1cGRhdGVfdGltZRgDIAEoASKgAgoT",
          "Q2hhcmFjdGVyV29ybGRTdGF0ZRIRCglpc19wbGF5ZXIYASABKAgSCgoCaWQY",
          "AiABKAkSHgoKbW9kZWxfZGF0YRgDIAEoCzIKLk1vZGVsRGF0YRIoCg9hbmlt",
          "YXRpb25fc3RhdGUYBCABKAsyDy5BbmltYXRpb25TdGF0ZRIbCghsb2NhdGlv",
          "bhgFIAEoCzIJLkxvY2F0aW9uEiEKC29yaWVudGF0aW9uGAYgASgLMgwuT3Jp",
          "ZW50YXRpb24SHwoKdHJhamVjdG9yeRgHIAEoCzILLlRyYWplY3RvcnkSKwoR",
          "aGVhbHRoX2FuZF9zdGF0dXMYCCABKAsyEC5IZWFsdGhBbmRTdGF0dXMSEgoK",
          "aXNfdmlzaWJsZRgJIAEoCCJ2CglNb2RlbERhdGESMgoRcGxheWVyX2FwcGVh",
          "cmFuY2UYASABKAsyFS5QbGF5ZXJBcHBlYXJhbmNlRGF0YUgAEiwKDm1vbnN0",
          "ZXJfcHJlZmFiGAIgASgLMhIuTW9uc3RlclByZWZhYkRhdGFIAEIHCgVtb2Rl",
          "bCIoChRQbGF5ZXJBcHBlYXJhbmNlRGF0YRIQCghmdXJfdHlwZRgBIAEoBSIo",
          "ChFNb25zdGVyUHJlZmFiRGF0YRITCgtwcmVmYWJfbmFtZRgBIAEoCSIfCg5B",
          "bmltYXRpb25TdGF0ZRINCgVzdGF0ZRgBIAEoCSIrCghMb2NhdGlvbhIJCgF4",
          "GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEoAiI5CgtPcmllbnRhdGlvbhIJ",
          "CgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEoAhIJCgF3GAQgASgCIi0K",
          "ClRyYWplY3RvcnkSCQoBeBgBIAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAIi",
          "PAoPSGVhbHRoQW5kU3RhdHVzEg0KBWxldmVsGAEgASgFEgoKAmhwGAIgASgF",
          "Eg4KBm1heF9ocBgDIAEoBSIhCh9VcGRhdGVDaGFyYWN0ZXJXb3JsZFN0YXRl",
          "UmVzdWx0Ii0KGkNoYXJhY3RlcldvcmxkU3RhdGVSZXF1ZXN0Eg8KB2dhbWVf",
          "aWQYASABKAkiQgoZUGVyc29uYWxXb3JsZFN0YXRlUmVxdWVzdBIPCgdnYW1l",
          "X2lkGAEgASgJEhQKDGNoYXJhY3Rlcl9pZBgCIAEoCSJXChlDaGFyYWN0ZXJX",
          "b3JsZFN0YXRlVXBkYXRlEg8KB2dhbWVfaWQYASABKAkSKQoLd29ybGRfc3Rh",
          "dGUYAiABKAsyFC5DaGFyYWN0ZXJXb3JsZFN0YXRlIiAKHlVwZGF0ZVBlcnNv",
          "bmFsV29ybGRTdGF0ZVJlc3VsdDLiAgoNQ2hhcmFjdGVyU3luYxJXChpVcGRh",
          "dGVDaGFyYWN0ZXJXb3JsZFN0YXRlcxIVLkNoYXJhY3RlcldvcmxkU3RhdGVz",
          "GiAuVXBkYXRlQ2hhcmFjdGVyV29ybGRTdGF0ZVJlc3VsdCIAEk8KF0dldENo",
          "YXJhY3RlcldvcmxkU3RhdGVzEhsuQ2hhcmFjdGVyV29ybGRTdGF0ZVJlcXVl",
          "c3QaFS5DaGFyYWN0ZXJXb3JsZFN0YXRlcyIAElkKGFVwZGF0ZVBlcnNvbmFs",
          "V29ybGRTdGF0ZRIaLkNoYXJhY3RlcldvcmxkU3RhdGVVcGRhdGUaHy5VcGRh",
          "dGVQZXJzb25hbFdvcmxkU3RhdGVSZXN1bHQiABJMChRHZXRQbGF5ZXJXb3Js",
          "ZFN0YXRlcxIbLkNoYXJhY3RlcldvcmxkU3RhdGVSZXF1ZXN0GhUuQ2hhcmFj",
          "dGVyV29ybGRTdGF0ZXMiAGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CharacterWorldStates), global::CharacterWorldStates.Parser, new[]{ "GameId", "CharacterData", "UpdateTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CharacterWorldState), global::CharacterWorldState.Parser, new[]{ "IsPlayer", "Id", "ModelData", "AnimationState", "Location", "Orientation", "Trajectory", "HealthAndStatus", "IsVisible" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ModelData), global::ModelData.Parser, new[]{ "PlayerAppearance", "MonsterPrefab" }, new[]{ "Model" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerAppearanceData), global::PlayerAppearanceData.Parser, new[]{ "FurType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MonsterPrefabData), global::MonsterPrefabData.Parser, new[]{ "PrefabName" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AnimationState), global::AnimationState.Parser, new[]{ "State" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Location), global::Location.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Orientation), global::Orientation.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Trajectory), global::Trajectory.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HealthAndStatus), global::HealthAndStatus.Parser, new[]{ "Level", "Hp", "MaxHp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateCharacterWorldStateResult), global::UpdateCharacterWorldStateResult.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CharacterWorldStateRequest), global::CharacterWorldStateRequest.Parser, new[]{ "GameId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PersonalWorldStateRequest), global::PersonalWorldStateRequest.Parser, new[]{ "GameId", "CharacterId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CharacterWorldStateUpdate), global::CharacterWorldStateUpdate.Parser, new[]{ "GameId", "WorldState" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdatePersonalWorldStateResult), global::UpdatePersonalWorldStateResult.Parser, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class CharacterWorldStates : pb::IMessage<CharacterWorldStates> {
  private static readonly pb::MessageParser<CharacterWorldStates> _parser = new pb::MessageParser<CharacterWorldStates>(() => new CharacterWorldStates());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CharacterWorldStates> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CharacterSyncReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CharacterWorldStates() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CharacterWorldStates(CharacterWorldStates other) : this() {
    gameId_ = other.gameId_;
    characterData_ = other.characterData_.Clone();
    updateTime_ = other.updateTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CharacterWorldStates Clone() {
    return new CharacterWorldStates(this);
  }

  /// <summary>Field number for the "game_id" field.</summary>
  public const int GameIdFieldNumber = 1;
  private string gameId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GameId {
    get { return gameId_; }
    set {
      gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "character_data" field.</summary>
  public const int CharacterDataFieldNumber = 2;
  private static readonly pb::FieldCodec<global::CharacterWorldState> _repeated_characterData_codec
      = pb::FieldCodec.ForMessage(18, global::CharacterWorldState.Parser);
  private readonly pbc::RepeatedField<global::CharacterWorldState> characterData_ = new pbc::RepeatedField<global::CharacterWorldState>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CharacterWorldState> CharacterData {
    get { return characterData_; }
  }

  /// <summary>Field number for the "update_time" field.</summary>
  public const int UpdateTimeFieldNumber = 3;
  private double updateTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double UpdateTime {
    get { return updateTime_; }
    set {
      updateTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CharacterWorldStates);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CharacterWorldStates other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GameId != other.GameId) return false;
    if(!characterData_.Equals(other.characterData_)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UpdateTime, other.UpdateTime)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GameId.Length != 0) hash ^= GameId.GetHashCode();
    hash ^= characterData_.GetHashCode();
    if (UpdateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UpdateTime);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GameId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(GameId);
    }
    characterData_.WriteTo(output, _repeated_characterData_codec);
    if (UpdateTime != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(UpdateTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GameId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
    }
    size += characterData_.CalculateSize(_repeated_characterData_codec);
    if (UpdateTime != 0D) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CharacterWorldStates other) {
    if (other == null) {
      return;
    }
    if (other.GameId.Length != 0) {
      GameId = other.GameId;
    }
    characterData_.Add(other.characterData_);
    if (other.UpdateTime != 0D) {
      UpdateTime = other.UpdateTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          GameId = input.ReadString();
          break;
        }
        case 18: {
          characterData_.AddEntriesFrom(input, _repeated_characterData_codec);
          break;
        }
        case 25: {
          UpdateTime = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class CharacterWorldState : pb::IMessage<CharacterWorldState> {
  private static readonly pb::MessageParser<CharacterWorldState> _parser = new pb::MessageParser<CharacterWorldState>(() => new CharacterWorldState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CharacterWorldState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CharacterSyncReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CharacterWorldState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CharacterWorldState(CharacterWorldState other) : this() {
    isPlayer_ = other.isPlayer_;
    id_ = other.id_;
    modelData_ = other.modelData_ != null ? other.modelData_.Clone() : null;
    animationState_ = other.animationState_ != null ? other.animationState_.Clone() : null;
    location_ = other.location_ != null ? other.location_.Clone() : null;
    orientation_ = other.orientation_ != null ? other.orientation_.Clone() : null;
    trajectory_ = other.trajectory_ != null ? other.trajectory_.Clone() : null;
    healthAndStatus_ = other.healthAndStatus_ != null ? other.healthAndStatus_.Clone() : null;
    isVisible_ = other.isVisible_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CharacterWorldState Clone() {
    return new CharacterWorldState(this);
  }

  /// <summary>Field number for the "is_player" field.</summary>
  public const int IsPlayerFieldNumber = 1;
  private bool isPlayer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsPlayer {
    get { return isPlayer_; }
    set {
      isPlayer_ = value;
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "model_data" field.</summary>
  public const int ModelDataFieldNumber = 3;
  private global::ModelData modelData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ModelData ModelData {
    get { return modelData_; }
    set {
      modelData_ = value;
    }
  }

  /// <summary>Field number for the "animation_state" field.</summary>
  public const int AnimationStateFieldNumber = 4;
  private global::AnimationState animationState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AnimationState AnimationState {
    get { return animationState_; }
    set {
      animationState_ = value;
    }
  }

  /// <summary>Field number for the "location" field.</summary>
  public const int LocationFieldNumber = 5;
  private global::Location location_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Location Location {
    get { return location_; }
    set {
      location_ = value;
    }
  }

  /// <summary>Field number for the "orientation" field.</summary>
  public const int OrientationFieldNumber = 6;
  private global::Orientation orientation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Orientation Orientation {
    get { return orientation_; }
    set {
      orientation_ = value;
    }
  }

  /// <summary>Field number for the "trajectory" field.</summary>
  public const int TrajectoryFieldNumber = 7;
  private global::Trajectory trajectory_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Trajectory Trajectory {
    get { return trajectory_; }
    set {
      trajectory_ = value;
    }
  }

  /// <summary>Field number for the "health_and_status" field.</summary>
  public const int HealthAndStatusFieldNumber = 8;
  private global::HealthAndStatus healthAndStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HealthAndStatus HealthAndStatus {
    get { return healthAndStatus_; }
    set {
      healthAndStatus_ = value;
    }
  }

  /// <summary>Field number for the "is_visible" field.</summary>
  public const int IsVisibleFieldNumber = 9;
  private bool isVisible_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsVisible {
    get { return isVisible_; }
    set {
      isVisible_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CharacterWorldState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CharacterWorldState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsPlayer != other.IsPlayer) return false;
    if (Id != other.Id) return false;
    if (!object.Equals(ModelData, other.ModelData)) return false;
    if (!object.Equals(AnimationState, other.AnimationState)) return false;
    if (!object.Equals(Location, other.Location)) return false;
    if (!object.Equals(Orientation, other.Orientation)) return false;
    if (!object.Equals(Trajectory, other.Trajectory)) return false;
    if (!object.Equals(HealthAndStatus, other.HealthAndStatus)) return false;
    if (IsVisible != other.IsVisible) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsPlayer != false) hash ^= IsPlayer.GetHashCode();
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (modelData_ != null) hash ^= ModelData.GetHashCode();
    if (animationState_ != null) hash ^= AnimationState.GetHashCode();
    if (location_ != null) hash ^= Location.GetHashCode();
    if (orientation_ != null) hash ^= Orientation.GetHashCode();
    if (trajectory_ != null) hash ^= Trajectory.GetHashCode();
    if (healthAndStatus_ != null) hash ^= HealthAndStatus.GetHashCode();
    if (IsVisible != false) hash ^= IsVisible.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsPlayer != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsPlayer);
    }
    if (Id.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Id);
    }
    if (modelData_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ModelData);
    }
    if (animationState_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(AnimationState);
    }
    if (location_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Location);
    }
    if (orientation_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Orientation);
    }
    if (trajectory_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Trajectory);
    }
    if (healthAndStatus_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(HealthAndStatus);
    }
    if (IsVisible != false) {
      output.WriteRawTag(72);
      output.WriteBool(IsVisible);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsPlayer != false) {
      size += 1 + 1;
    }
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (modelData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModelData);
    }
    if (animationState_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnimationState);
    }
    if (location_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
    }
    if (orientation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
    }
    if (trajectory_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trajectory);
    }
    if (healthAndStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(HealthAndStatus);
    }
    if (IsVisible != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CharacterWorldState other) {
    if (other == null) {
      return;
    }
    if (other.IsPlayer != false) {
      IsPlayer = other.IsPlayer;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.modelData_ != null) {
      if (modelData_ == null) {
        ModelData = new global::ModelData();
      }
      ModelData.MergeFrom(other.ModelData);
    }
    if (other.animationState_ != null) {
      if (animationState_ == null) {
        AnimationState = new global::AnimationState();
      }
      AnimationState.MergeFrom(other.AnimationState);
    }
    if (other.location_ != null) {
      if (location_ == null) {
        Location = new global::Location();
      }
      Location.MergeFrom(other.Location);
    }
    if (other.orientation_ != null) {
      if (orientation_ == null) {
        Orientation = new global::Orientation();
      }
      Orientation.MergeFrom(other.Orientation);
    }
    if (other.trajectory_ != null) {
      if (trajectory_ == null) {
        Trajectory = new global::Trajectory();
      }
      Trajectory.MergeFrom(other.Trajectory);
    }
    if (other.healthAndStatus_ != null) {
      if (healthAndStatus_ == null) {
        HealthAndStatus = new global::HealthAndStatus();
      }
      HealthAndStatus.MergeFrom(other.HealthAndStatus);
    }
    if (other.IsVisible != false) {
      IsVisible = other.IsVisible;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsPlayer = input.ReadBool();
          break;
        }
        case 18: {
          Id = input.ReadString();
          break;
        }
        case 26: {
          if (modelData_ == null) {
            ModelData = new global::ModelData();
          }
          input.ReadMessage(ModelData);
          break;
        }
        case 34: {
          if (animationState_ == null) {
            AnimationState = new global::AnimationState();
          }
          input.ReadMessage(AnimationState);
          break;
        }
        case 42: {
          if (location_ == null) {
            Location = new global::Location();
          }
          input.ReadMessage(Location);
          break;
        }
        case 50: {
          if (orientation_ == null) {
            Orientation = new global::Orientation();
          }
          input.ReadMessage(Orientation);
          break;
        }
        case 58: {
          if (trajectory_ == null) {
            Trajectory = new global::Trajectory();
          }
          input.ReadMessage(Trajectory);
          break;
        }
        case 66: {
          if (healthAndStatus_ == null) {
            HealthAndStatus = new global::HealthAndStatus();
          }
          input.ReadMessage(HealthAndStatus);
          break;
        }
        case 72: {
          IsVisible = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class ModelData : pb::IMessage<ModelData> {
  private static readonly pb::MessageParser<ModelData> _parser = new pb::MessageParser<ModelData>(() => new ModelData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ModelData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CharacterSyncReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModelData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModelData(ModelData other) : this() {
    switch (other.ModelCase) {
      case ModelOneofCase.PlayerAppearance:
        PlayerAppearance = other.PlayerAppearance.Clone();
        break;
      case ModelOneofCase.MonsterPrefab:
        MonsterPrefab = other.MonsterPrefab.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModelData Clone() {
    return new ModelData(this);
  }

  /// <summary>Field number for the "player_appearance" field.</summary>
  public const int PlayerAppearanceFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerAppearanceData PlayerAppearance {
    get { return modelCase_ == ModelOneofCase.PlayerAppearance ? (global::PlayerAppearanceData) model_ : null; }
    set {
      model_ = value;
      modelCase_ = value == null ? ModelOneofCase.None : ModelOneofCase.PlayerAppearance;
    }
  }

  /// <summary>Field number for the "monster_prefab" field.</summary>
  public const int MonsterPrefabFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MonsterPrefabData MonsterPrefab {
    get { return modelCase_ == ModelOneofCase.MonsterPrefab ? (global::MonsterPrefabData) model_ : null; }
    set {
      model_ = value;
      modelCase_ = value == null ? ModelOneofCase.None : ModelOneofCase.MonsterPrefab;
    }
  }

  private object model_;
  /// <summary>Enum of possible cases for the "model" oneof.</summary>
  public enum ModelOneofCase {
    None = 0,
    PlayerAppearance = 1,
    MonsterPrefab = 2,
  }
  private ModelOneofCase modelCase_ = ModelOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModelOneofCase ModelCase {
    get { return modelCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearModel() {
    modelCase_ = ModelOneofCase.None;
    model_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ModelData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ModelData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(PlayerAppearance, other.PlayerAppearance)) return false;
    if (!object.Equals(MonsterPrefab, other.MonsterPrefab)) return false;
    if (ModelCase != other.ModelCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (modelCase_ == ModelOneofCase.PlayerAppearance) hash ^= PlayerAppearance.GetHashCode();
    if (modelCase_ == ModelOneofCase.MonsterPrefab) hash ^= MonsterPrefab.GetHashCode();
    hash ^= (int) modelCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (modelCase_ == ModelOneofCase.PlayerAppearance) {
      output.WriteRawTag(10);
      output.WriteMessage(PlayerAppearance);
    }
    if (modelCase_ == ModelOneofCase.MonsterPrefab) {
      output.WriteRawTag(18);
      output.WriteMessage(MonsterPrefab);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (modelCase_ == ModelOneofCase.PlayerAppearance) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerAppearance);
    }
    if (modelCase_ == ModelOneofCase.MonsterPrefab) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonsterPrefab);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ModelData other) {
    if (other == null) {
      return;
    }
    switch (other.ModelCase) {
      case ModelOneofCase.PlayerAppearance:
        if (PlayerAppearance == null) {
          PlayerAppearance = new global::PlayerAppearanceData();
        }
        PlayerAppearance.MergeFrom(other.PlayerAppearance);
        break;
      case ModelOneofCase.MonsterPrefab:
        if (MonsterPrefab == null) {
          MonsterPrefab = new global::MonsterPrefabData();
        }
        MonsterPrefab.MergeFrom(other.MonsterPrefab);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::PlayerAppearanceData subBuilder = new global::PlayerAppearanceData();
          if (modelCase_ == ModelOneofCase.PlayerAppearance) {
            subBuilder.MergeFrom(PlayerAppearance);
          }
          input.ReadMessage(subBuilder);
          PlayerAppearance = subBuilder;
          break;
        }
        case 18: {
          global::MonsterPrefabData subBuilder = new global::MonsterPrefabData();
          if (modelCase_ == ModelOneofCase.MonsterPrefab) {
            subBuilder.MergeFrom(MonsterPrefab);
          }
          input.ReadMessage(subBuilder);
          MonsterPrefab = subBuilder;
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerAppearanceData : pb::IMessage<PlayerAppearanceData> {
  private static readonly pb::MessageParser<PlayerAppearanceData> _parser = new pb::MessageParser<PlayerAppearanceData>(() => new PlayerAppearanceData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerAppearanceData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CharacterSyncReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerAppearanceData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerAppearanceData(PlayerAppearanceData other) : this() {
    furType_ = other.furType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerAppearanceData Clone() {
    return new PlayerAppearanceData(this);
  }

  /// <summary>Field number for the "fur_type" field.</summary>
  public const int FurTypeFieldNumber = 1;
  private int furType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FurType {
    get { return furType_; }
    set {
      furType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerAppearanceData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerAppearanceData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FurType != other.FurType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FurType != 0) hash ^= FurType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FurType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(FurType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FurType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FurType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerAppearanceData other) {
    if (other == null) {
      return;
    }
    if (other.FurType != 0) {
      FurType = other.FurType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FurType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MonsterPrefabData : pb::IMessage<MonsterPrefabData> {
  private static readonly pb::MessageParser<MonsterPrefabData> _parser = new pb::MessageParser<MonsterPrefabData>(() => new MonsterPrefabData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MonsterPrefabData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CharacterSyncReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonsterPrefabData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonsterPrefabData(MonsterPrefabData other) : this() {
    prefabName_ = other.prefabName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonsterPrefabData Clone() {
    return new MonsterPrefabData(this);
  }

  /// <summary>Field number for the "prefab_name" field.</summary>
  public const int PrefabNameFieldNumber = 1;
  private string prefabName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PrefabName {
    get { return prefabName_; }
    set {
      prefabName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MonsterPrefabData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MonsterPrefabData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PrefabName != other.PrefabName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PrefabName.Length != 0) hash ^= PrefabName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PrefabName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(PrefabName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PrefabName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PrefabName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MonsterPrefabData other) {
    if (other == null) {
      return;
    }
    if (other.PrefabName.Length != 0) {
      PrefabName = other.PrefabName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PrefabName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class AnimationState : pb::IMessage<AnimationState> {
  private static readonly pb::MessageParser<AnimationState> _parser = new pb::MessageParser<AnimationState>(() => new AnimationState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AnimationState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CharacterSyncReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AnimationState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AnimationState(AnimationState other) : this() {
    state_ = other.state_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AnimationState Clone() {
    return new AnimationState(this);
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 1;
  private string state_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string State {
    get { return state_; }
    set {
      state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AnimationState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AnimationState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (State != other.State) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (State.Length != 0) hash ^= State.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (State.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(State);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (State.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AnimationState other) {
    if (other == null) {
      return;
    }
    if (other.State.Length != 0) {
      State = other.State;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          State = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Location : pb::IMessage<Location> {
  private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Location> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CharacterSyncReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Location() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Location(Location other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Location Clone() {
    return new Location(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Location);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Location other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Location other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class Orientation : pb::IMessage<Orientation> {
  private static readonly pb::MessageParser<Orientation> _parser = new pb::MessageParser<Orientation>(() => new Orientation());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Orientation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CharacterSyncReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Orientation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Orientation(Orientation other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    w_ = other.w_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Orientation Clone() {
    return new Orientation(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  /// <summary>Field number for the "w" field.</summary>
  public const int WFieldNumber = 4;
  private float w_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float W {
    get { return w_; }
    set {
      w_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Orientation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Orientation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (W != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (W != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(W);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (W != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Orientation other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    if (other.W != 0F) {
      W = other.W;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
        case 37: {
          W = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class Trajectory : pb::IMessage<Trajectory> {
  private static readonly pb::MessageParser<Trajectory> _parser = new pb::MessageParser<Trajectory>(() => new Trajectory());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Trajectory> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CharacterSyncReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Trajectory() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Trajectory(Trajectory other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Trajectory Clone() {
    return new Trajectory(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Trajectory);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Trajectory other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Trajectory other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class HealthAndStatus : pb::IMessage<HealthAndStatus> {
  private static readonly pb::MessageParser<HealthAndStatus> _parser = new pb::MessageParser<HealthAndStatus>(() => new HealthAndStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HealthAndStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CharacterSyncReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HealthAndStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HealthAndStatus(HealthAndStatus other) : this() {
    level_ = other.level_;
    hp_ = other.hp_;
    maxHp_ = other.maxHp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HealthAndStatus Clone() {
    return new HealthAndStatus(this);
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 1;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "hp" field.</summary>
  public const int HpFieldNumber = 2;
  private int hp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Hp {
    get { return hp_; }
    set {
      hp_ = value;
    }
  }

  /// <summary>Field number for the "max_hp" field.</summary>
  public const int MaxHpFieldNumber = 3;
  private int maxHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxHp {
    get { return maxHp_; }
    set {
      maxHp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HealthAndStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HealthAndStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Level != other.Level) return false;
    if (Hp != other.Hp) return false;
    if (MaxHp != other.MaxHp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Hp != 0) hash ^= Hp.GetHashCode();
    if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Level != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Level);
    }
    if (Hp != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Hp);
    }
    if (MaxHp != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(MaxHp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Hp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
    }
    if (MaxHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HealthAndStatus other) {
    if (other == null) {
      return;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Hp != 0) {
      Hp = other.Hp;
    }
    if (other.MaxHp != 0) {
      MaxHp = other.MaxHp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Level = input.ReadInt32();
          break;
        }
        case 16: {
          Hp = input.ReadInt32();
          break;
        }
        case 24: {
          MaxHp = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class UpdateCharacterWorldStateResult : pb::IMessage<UpdateCharacterWorldStateResult> {
  private static readonly pb::MessageParser<UpdateCharacterWorldStateResult> _parser = new pb::MessageParser<UpdateCharacterWorldStateResult>(() => new UpdateCharacterWorldStateResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateCharacterWorldStateResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CharacterSyncReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateCharacterWorldStateResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateCharacterWorldStateResult(UpdateCharacterWorldStateResult other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateCharacterWorldStateResult Clone() {
    return new UpdateCharacterWorldStateResult(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateCharacterWorldStateResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateCharacterWorldStateResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateCharacterWorldStateResult other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class CharacterWorldStateRequest : pb::IMessage<CharacterWorldStateRequest> {
  private static readonly pb::MessageParser<CharacterWorldStateRequest> _parser = new pb::MessageParser<CharacterWorldStateRequest>(() => new CharacterWorldStateRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CharacterWorldStateRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CharacterSyncReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CharacterWorldStateRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CharacterWorldStateRequest(CharacterWorldStateRequest other) : this() {
    gameId_ = other.gameId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CharacterWorldStateRequest Clone() {
    return new CharacterWorldStateRequest(this);
  }

  /// <summary>Field number for the "game_id" field.</summary>
  public const int GameIdFieldNumber = 1;
  private string gameId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GameId {
    get { return gameId_; }
    set {
      gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CharacterWorldStateRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CharacterWorldStateRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GameId != other.GameId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GameId.Length != 0) hash ^= GameId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GameId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(GameId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GameId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CharacterWorldStateRequest other) {
    if (other == null) {
      return;
    }
    if (other.GameId.Length != 0) {
      GameId = other.GameId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          GameId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PersonalWorldStateRequest : pb::IMessage<PersonalWorldStateRequest> {
  private static readonly pb::MessageParser<PersonalWorldStateRequest> _parser = new pb::MessageParser<PersonalWorldStateRequest>(() => new PersonalWorldStateRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PersonalWorldStateRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CharacterSyncReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PersonalWorldStateRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PersonalWorldStateRequest(PersonalWorldStateRequest other) : this() {
    gameId_ = other.gameId_;
    characterId_ = other.characterId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PersonalWorldStateRequest Clone() {
    return new PersonalWorldStateRequest(this);
  }

  /// <summary>Field number for the "game_id" field.</summary>
  public const int GameIdFieldNumber = 1;
  private string gameId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GameId {
    get { return gameId_; }
    set {
      gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "character_id" field.</summary>
  public const int CharacterIdFieldNumber = 2;
  private string characterId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CharacterId {
    get { return characterId_; }
    set {
      characterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PersonalWorldStateRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PersonalWorldStateRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GameId != other.GameId) return false;
    if (CharacterId != other.CharacterId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GameId.Length != 0) hash ^= GameId.GetHashCode();
    if (CharacterId.Length != 0) hash ^= CharacterId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GameId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(GameId);
    }
    if (CharacterId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(CharacterId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GameId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
    }
    if (CharacterId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CharacterId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PersonalWorldStateRequest other) {
    if (other == null) {
      return;
    }
    if (other.GameId.Length != 0) {
      GameId = other.GameId;
    }
    if (other.CharacterId.Length != 0) {
      CharacterId = other.CharacterId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          GameId = input.ReadString();
          break;
        }
        case 18: {
          CharacterId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CharacterWorldStateUpdate : pb::IMessage<CharacterWorldStateUpdate> {
  private static readonly pb::MessageParser<CharacterWorldStateUpdate> _parser = new pb::MessageParser<CharacterWorldStateUpdate>(() => new CharacterWorldStateUpdate());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CharacterWorldStateUpdate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CharacterSyncReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CharacterWorldStateUpdate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CharacterWorldStateUpdate(CharacterWorldStateUpdate other) : this() {
    gameId_ = other.gameId_;
    worldState_ = other.worldState_ != null ? other.worldState_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CharacterWorldStateUpdate Clone() {
    return new CharacterWorldStateUpdate(this);
  }

  /// <summary>Field number for the "game_id" field.</summary>
  public const int GameIdFieldNumber = 1;
  private string gameId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GameId {
    get { return gameId_; }
    set {
      gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "world_state" field.</summary>
  public const int WorldStateFieldNumber = 2;
  private global::CharacterWorldState worldState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CharacterWorldState WorldState {
    get { return worldState_; }
    set {
      worldState_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CharacterWorldStateUpdate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CharacterWorldStateUpdate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GameId != other.GameId) return false;
    if (!object.Equals(WorldState, other.WorldState)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GameId.Length != 0) hash ^= GameId.GetHashCode();
    if (worldState_ != null) hash ^= WorldState.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GameId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(GameId);
    }
    if (worldState_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(WorldState);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GameId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
    }
    if (worldState_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldState);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CharacterWorldStateUpdate other) {
    if (other == null) {
      return;
    }
    if (other.GameId.Length != 0) {
      GameId = other.GameId;
    }
    if (other.worldState_ != null) {
      if (worldState_ == null) {
        WorldState = new global::CharacterWorldState();
      }
      WorldState.MergeFrom(other.WorldState);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          GameId = input.ReadString();
          break;
        }
        case 18: {
          if (worldState_ == null) {
            WorldState = new global::CharacterWorldState();
          }
          input.ReadMessage(WorldState);
          break;
        }
      }
    }
  }

}

public sealed partial class UpdatePersonalWorldStateResult : pb::IMessage<UpdatePersonalWorldStateResult> {
  private static readonly pb::MessageParser<UpdatePersonalWorldStateResult> _parser = new pb::MessageParser<UpdatePersonalWorldStateResult>(() => new UpdatePersonalWorldStateResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdatePersonalWorldStateResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CharacterSyncReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdatePersonalWorldStateResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdatePersonalWorldStateResult(UpdatePersonalWorldStateResult other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdatePersonalWorldStateResult Clone() {
    return new UpdatePersonalWorldStateResult(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdatePersonalWorldStateResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdatePersonalWorldStateResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdatePersonalWorldStateResult other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

#endregion


#endregion Designer generated code
